import java.text.SimpleDateFormat
buildscript {
    dependencies {

    }
}
plugins {
    id 'com.android.application'
}

android {
    namespace 'com.freemud.app.easypos'
    compileSdk rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        applicationId "com.freemud.app.easypos"
        minSdk rootProject.ext.android["minSdkVersion"]
        targetSdk rootProject.ext.android["targetSdkVersion"]
        versionCode 2
        versionName "1.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi',"armeabi-v7a", "arm64-v8a" //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            storeFile file('easypos.jks')
            storePassword KEY_PWD
            keyAlias KEY_ALIAS
            keyPassword KEY_STORE_PWD
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "MOCK_OPEN", "true"
            minifyEnabled false
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
//            debuggable true
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "MOCK_OPEN", "false"
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all{ variant ->
        variant.outputs.all {
            if (variant.buildType.name.equals("release")) {
                def fileName = "easypos-${variant.productFlavors[0].name}" +  "-v"+ project.VERSION_NAME + "-" + getNowTime() + ".apk"
                outputFileName = fileName
            }
            def envName = variant.buildType.name.capitalize()
            def outputFilePath = "/${rootDir.absolutePath}/app/build/outputs/apk/${envName}/${variant.productFlavors[0].name}"
            File outputFile = new File(outputFilePath)
            variant.assemble.doLast{
                copy {
                    variant.outputs.all { file ->
                        copy {
                            from file.outputFile
                            into outputFile
                        }
                    }
                }
            }
        }
    }

    flavorDimensions "packageShopAssistant"
    productFlavors {
        Dev {
            applicationIdSuffix ".dev"
            buildConfigField "String", "SERVER_URL", "\"https://epos.cn/\""
            buildConfigField "String", "H5_BASE_URL", "\"http://helperapp.qa-ingress.sandload.cn\""
            manifestPlaceholders = [APP_NAME : "dev"]
        }

        Qa {
            applicationIdSuffix ".qa"
            buildConfigField "String", "SERVER_URL", "\"https://epos.cn/\""
            buildConfigField "String", "H5_BASE_URL", "\"http://helperapp.qa-ingress.sandload.cn\""
            manifestPlaceholders = [APP_NAME : "qa"]
        }

        Pre {
            applicationIdSuffix ".pre"
            buildConfigField "String", "SERVER_URL", "\"https://epos.cn/\""
            buildConfigField "String", "H5_BASE_URL", "\"http://helperapp.qa-ingress.sandload.cn\""
            manifestPlaceholders = [APP_NAME : "pre"]
        }

        Pro {
//            applicationIdSuffix ".pro"
            buildConfigField "String", "SERVER_URL", "\"https://epos.cn/\""
            buildConfigField "String", "H5_BASE_URL", "\"https://helperapp.sandload.cn\""
            manifestPlaceholders = [APP_NAME : "FMEPos"]
        }
    }

    configurations.all {
        resolutionStrategy {
            resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'androidx.core') {
                    details.useVersion "1.3.2"
                }

            }
        }
    }


    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}

dependencies {
    implementation 'com.sunmi:printerlibrary:1.0.18'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation fileTree(include: '*.jar', dir: 'libs')
    //androidx
    implementation rootProject.ext.dependencies["cardview"]
    implementation rootProject.ext.dependencies["design"]

    implementation rootProject.ext.dependencies["androideventbus"]

    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    implementation rootProject.ext.dependencies["progressmanager"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]
    implementation rootProject.ext.dependencies["lifecyclemodel"]

    implementation(rootProject.ext.dependencies["paginate"]) {
        exclude module: 'recyclerview'
    }

    implementation project(':arms')
    implementation rootProject.ext.dependencies["autosize"]
    implementation project(':arms-imageloader-glide')
    implementation 'com.github.DylanCaiCoding.ViewBindingKTX:viewbinding-base:2.0.1'

    //other 项目级独立依赖
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'
    implementation rootProject.ext.dependencies["pickerview"]
    implementation 'com.github.mylhyl:Android-CircleDialog:5.3.8'
    implementation 'com.zzti.fengyongge:imagepicker:1.4.5'

    implementation 'com.king.zxing:zxing-lite:1.1.7-androidx'
    implementation("com.lwkandroid:ImagePicker:1.5.0") {
        exclude(group: 'com.android.support', module: 'support-v4')
        exclude(group: 'com.github.bumptech.glide', module: 'glide')
    }

    implementation 'com.github.getActivity:XXPermissions:16.2'

    //smartrefershlayout
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android:+'
    implementation  'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation  'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    implementation  'com.scwang.smart:refresh-header-radar:2.0.1'       //雷达刷新头
    implementation  'com.scwang.smart:refresh-header-falsify:2.0.1'     //虚拟刷新头
    implementation  'com.scwang.smart:refresh-header-material:2.0.1'    //谷歌刷新头
    implementation  'com.scwang.smart:refresh-header-two-level:2.0.1'   //二级刷新头
    implementation  'com.scwang.smart:refresh-footer-ball:2.0.1'        //球脉冲加载
    implementation  'com.scwang.smart:refresh-footer-classics:2.0.1'
    //图表
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation ('org.apache.thrift:libthrift:0.13.0'){
        exclude group:"javax.annotation",module:"javax.annotation-api"
    }

    //日历
    implementation 'com.haibin:calendarview:3.7.1'

    //bugly
    implementation 'com.tencent.bugly:crashreport:4.0.4'

    //
    implementation 'com.jaeger.statusbarutil:library:1.5.1'



}

static def getNowTime() {
    return new SimpleDateFormat("MM-dd HH-mm-ss",Locale.CHINA).format(new Date());
}